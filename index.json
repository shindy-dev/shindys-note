[{"content":"はじめに ObsidianのVault内ドキュメントの一部をHugoという静的サイトジェネレータを用いてGitHub Pagesで公開してみました。\n使用するもの MacBook Air M3 VS Code \u0026hellip; Hugo環境デバッグ Obsidian \u0026hellip; ドキュメントの更新 Homebrew \u0026hellip; パッケージマネージャ（Hugoインストール用） Git \u0026hellip; ファイルバージョン管理（brew install gitでインストール可能） GitHubアカウント \u0026hellip; GitHubのサービスをフル活用するので必要 （任意）Gitクライアント \u0026hellip; GitHub Desktop、VS Codeの拡張機能、SourceTree等使いやすいもの ObsidianのVault構成と命題 ObsidianのVaultはGitHubのプライベートリポジトリで現在管理しています。私の場合、技術系ドキュメントと日記をひとつのVaultで管理しているので、技術系ドキュメントのみを公開する方法を模索していました。\n1 2 3 4 5 6 7 ├── .git/ # git ├── .obsidian/ # Obsidianの設定 ├── diary/ # 日記 ├── docs/ # 技術系のドキュメント ├── assets/ # 画像や資料アセット（docs用） ├── LICENSE # リポジトリのライセンスファイル └── README.md # リポジトリのREADMEファイル 今回の方針 Vault内の「docs」や「assets」フォルダの内容だけを公開するために、以下の手順を実施します。以降登場するリポジトリ名やブランチ名は任意です。\nPublicリポジトリshindys-noteを作成する └ Hugo環境をデフォルトブランチに構築する GitHub Pages公開用ブランチgh-pagesを構築する Vault内対象フォルダの内容をmasterへ同期する gh-pagesブランチをGitHub Pagesで公開する 1. Publicリポジトリshindys-noteを作成する Hugoインストール macOS\n1 brew install hugo Hugo siteの作成 \u0026amp; 空ディレクトリ内に.gitkeepを作成 任意のディレクトリに移動してから以下コマンドを実行してください。\n1 2 3 4 5 6 # Hugo siteの作成 hugo new site shindys-note cd shindys-note # 空ディレクトリ内に.gitkeep（中身のないファイル）を作成（空のディレクトリはGitの追跡対象外となるため） find . -type d -empty -exec touch {}/.gitkeep \\; Gitの初期化 1 2 # デフォルトブランチである`master`や`main`が作成される git init （任意）.gitignoreのおすすめ設定 .gitignoreファイルを作成しておくと、中に記述したパスをGitが自動で追跡対象外にしてくれます。\n# Hugo build output /public/ /resources/_gen/ /hugo_stats.json /.hugo_build.lock # Logs and OS files *.log .DS_Store Thumbs.db # VSCode settings .vscode/ .history/ # Node stuff (もしnpmでテーマ管理する場合は必要) node_modules/ # Env files .env .env.* # Backup files *~ サイトの基本情報やテーマ変更やローカルでのテスト方法 GitHubへpushする前に自分の好きなテーマで記事がちゃんと表示されるかテストしましょう。\n基本情報（URLや言語、タイトル等） hugo.toml内で設定できます。\n1 2 3 4 5 6 # GitHub PagesのURLは通常、以下の形式です # https://\u0026lt;githubユーザ名\u0026gt;.github.io/リポジトリ名/ baseURL = \u0026#39;https://shindy-dev.github.io/shindys-note/\u0026#39; languageCode = \u0026#39;ja-JP\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; テーマ変更 テーマはHugo Themesに一覧があります。今回はanankeに変更する例\n1 2 3 4 cd shindys-note git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke # 設定ファイルでテーマを設定すれば完了です echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; hugo.toml shindys-noteを再度クローンしたときに、submoduleが配置されていない場合はリポジトリ内で以下のコマンドを実行してください。\n1 git submodule update --init --recursive またsubmoduleを解除（テーマをアンインストール）する場合は以下のコマンドを実行後、変更をコミットしてください。（hugo.tomlのthemeも削除してください。）\n1 2 git submodule deinit -f themes/ananke git rm -f themes/ananke post追加 以下のコマンドで/archetypes/default.mdをテンプレートとして/content/posts/hello.mdを作成します。あくまでテスト用なので、自分であらかじめ作成したドキュメントを/content/postsへ格納してテストしていただいても構いません。テスト用のドキュメントをコミット時に対象とするかは自己判断でお願いします。\n1 hugo new posts/hello.md ローカルサーバー起動 1 hugo server -D -D は下書き（draft = trueの記事）も表示するオプションです。 起動後ブラウザで確認 → デフォルトURL：http://localhost:1313 保存するたびに自動でリロードしてくれます。 好みのテーマで作成した記事が表示されたら確認は終わりです。今回は細かなレイアウトの修正は割愛します。 shindys-noteをGitHub へ Publicリポジトリとして公開 GitHubのリモートリポジトリの作成方法は多種多様なので、ご自身に合うやり方で公開してください。\nGitクライアント（GitHub Desktop等） GitHub CLI GitHub .gitignoreの内容にもよりますが、GitHubへは以下の構成がpushされるはずです。\n1 2 3 4 5 6 7 8 9 10 11 12 ├── .git ├── archetypes ├── data ├── i18n ├── layouts ├── static ├── themes ├── .gitignore ├── .gitmodules ├── hugo.toml ├── LICENSE └── README.md 2. GitHub Pages公開環境をgh-pagesブランチに構築する ここでは、GitHub Actionsを使用してshindys-noteのデフォルトブランチに更新があった際に、自動でHugoによるビルドを行い成果物をgh-pagesへ反映する仕組みを構築します。手順としては以下の内容を記述した.github/workflows/deploy.ymlをshindys-noteのデフォルトブランチで作成し、pushするだけです。コメント部分に注意して適宜修正してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 name: Deploy Hugo site to GitHub Pages on: push: branches: - master # mainの場合はここを書き換える jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 with: submodules: true # テーマをサブモジュールとして使用している場合 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;0.148.2\u0026#39; # 好きなHugoバージョンに変更可 extended: true # SCSS/SASSをビルドするテーマの場合はtrueにしないとエラーになる - name: Build Hugo site run: hugo --minify - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v4 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: gh-pages GitHubリポジトリのActionsタブを見ると成否が伺えます。 ここまでで、shindys-noteの環境は整いました。あとはObsidianのVault内の更新があればshindys-noteへ同期を行う仕組みを構築すれば、GitHub Pagesへの公開設定を実施して完了です。\n3. Vault内対象フォルダの内容をmasterへ同期する プライベートリポジトリで管理しているObsidianのVaultの技術系ドキュメント関連ファイルに変更があった場合に、Vault内対象フォルダの「docs」や「assets」の内容をshindys-noteのmasterブランチの「content」や「assets」へ同期（置換）する仕組みを構築します。\n3.1 Personal Access Token (PAT)の作成 リポジトリ間の操作になりますので、以下の手順でリポジトリ操作権限を持ったPATを作成します。\nGitHub から Settings \u0026gt; Developer settings \u0026gt; Personal access tokens \u0026gt; Tokens (classic) scope: repo にチェックを入れる トークンをコピーする 3.2 PATをVaultリポジトリに設定 Vaultリポジトリ → Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret 名前：NOTE_REPO_TOKEN 値：上でコピーしたPAT 3.3 Vaultリポジトリ内にGitHub Actions用のスクリプトを作成 以下の内容を記述した.github/workflows/sync-to-note.ymlを作成し、pushしてください。 pushすると、Actionsが動作し、shindys-noteへ同期が行われます。コメント部分に注意して適宜修正してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 name: Sync Vault to shindys-note on: push: branches: - master # Vaultのメインブランチに合わせる paths: - \u0026#34;docs/**\u0026#34; - \u0026#34;assets/**\u0026#34; jobs: sync: runs-on: ubuntu-latest steps: - name: Checkout Vault repo uses: actions/checkout@v3 - name: Checkout shindys-note repo uses: actions/checkout@v3 with: repository: shindy-dev/shindys-note path: shindys-note token: ${{ secrets.NOTE_REPO_TOKEN }} - name: Sync folders run: | rsync -av --delete docs/ shindys-note/content/ # テーマによってコピー先は変更してください。 rsync -av --delete assets/ shindys-note/static/assets/ # Vault の設定によって変更してください - name: Commit and push changes run: | cd shindys-note git config user.name \u0026#34;github-actions[bot]\u0026#34; git config user.email \u0026#34;41898282+github-actions[bot]@users.noreply.github.com\u0026#34; git add . git commit -m \u0026#34;Sync from Vault: $(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; || echo \u0026#34;No changes to commit\u0026#34; git push origin master # Vaultのメインブランチに合わせる 4. gh-pagesブランチをGitHub Pagesで公開する 最後に構築した公開用環境をGitHub Pagesに公開する設定を行います。\nGitHubリポジトリのSettingsタブのPagesを選択 Build and deploymentのSourceに「Deploy from a branch」を選択 Branchにはgh-pages、/(root)を設定 ローカルでテストしたときと同じ内容が表示されれば、公開完了です🎵\n","permalink":"https://shindy-dev.github.io/shindys-note/posts/hugo%E3%81%A8github%E3%81%A7obsidian%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%9F%E3%83%A1%E3%83%A2%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003eObsidianのVault内ドキュメントの一部を\u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003eという静的サイトジェネレータを用いてGitHub Pagesで公開してみました。\u003c/p\u003e\n\u003ch2 id=\"使用するもの\"\u003e使用するもの\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMacBook Air M3\u003c/li\u003e\n\u003cli\u003eVS Code \u0026hellip; Hugo環境デバッグ\u003c/li\u003e\n\u003cli\u003eObsidian \u0026hellip; ドキュメントの更新\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://brew.sh/ja/\"\u003eHomebrew\u003c/a\u003e \u0026hellip; パッケージマネージャ（Hugoインストール用）\u003c/li\u003e\n\u003cli\u003eGit \u0026hellip; ファイルバージョン管理（\u003ccode\u003ebrew install git\u003c/code\u003eでインストール可能）\u003c/li\u003e\n\u003cli\u003eGitHubアカウント \u0026hellip; GitHubのサービスをフル活用するので必要\u003c/li\u003e\n\u003cli\u003e（任意）Gitクライアント \u0026hellip; GitHub Desktop、VS Codeの拡張機能、SourceTree等使いやすいもの\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"obsidianのvault構成と命題\"\u003eObsidianのVault構成と命題\u003c/h2\u003e\n\u003cp\u003eObsidianのVaultはGitHubのプライベートリポジトリで現在管理しています。私の場合、技術系ドキュメントと日記をひとつのVaultで管理しているので、技術系ドキュメントのみを公開する方法を模索していました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── .git/                  # git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── .obsidian/         # Obsidianの設定\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── diary/               # 日記\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── docs/               # 技術系のドキュメント\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── assets/             # 画像や資料アセット（docs用）\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── LICENSE           # リポジトリのライセンスファイル\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── README.md     # リポジトリのREADMEファイル\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"今回の方針\"\u003e今回の方針\u003c/h2\u003e\n\u003cp\u003eVault内の「docs」や「assets」フォルダの内容だけを公開するために、以下の手順を実施します。以降登場するリポジトリ名やブランチ名は任意です。\u003c/p\u003e","title":"HugoとGitHubでObsidianで書いたメモを公開してみた"},{"content":"はじめに RDBMSのDb2でよく使うコマンドや注意点を記載します。\nよく使うコマンド ライセンス確認 1 db2licm -l バージョン・bit数 1 db2level バックアップファイル情報確認 1 db2ckbkp -h [backup image] Db2のバージョン移行等での注意 Db2バージョンが大きく異なると、別のバージョンを経由して移行（リストア）する必要がある。\n9系から11.5系、10系から12系等が該当する。\n今回の事例 移行元 DB2: v9.7 32bit 移行先 DB2: v11.5 64bit バックアップファイル: オンライン、圧縮 問題点 オンラインバックアップだとバージョン間でのリストアができない オフラインでも v9.7 から v11.5 へ直接のリストアはできない 圧縮バックアップの場合、構成bit数が異なるDB2ではリストアできない 解決策 一度v9.7でリストアし、オフラインバックアップを取得する v9.7 -\u0026gt; v11.1.4(10.xでも可) -\u0026gt; 11.5 の順にリストアバックアップを行う v9.7(32bit) -\u0026gt; v9.7(64bit)の順にリストアバックアップを行う 手順 v9.7(32bit) リストア、オフラインバックアップ無圧縮を取得 -\u0026gt; v9.7(64bit) リストア、オフラインバックアップ圧縮を取得 -\u0026gt; v11.1.4 リストア、オフラインバックアップ圧縮を取得 -\u0026gt; v11.5 リストア、完了！ 注意 11.5.4の場合のみ移行後runstatsで不具合がでるためdb2catを実行する必要がある ","permalink":"https://shindy-dev.github.io/shindys-note/posts/db2/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003eRDBMSのDb2でよく使うコマンドや注意点を記載します。\u003c/p\u003e\n\u003ch2 id=\"よく使うコマンド\"\u003eよく使うコマンド\u003c/h2\u003e\n\u003ch3 id=\"ライセンス確認\"\u003eライセンス確認\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edb2licm -l\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"バージョンbit数\"\u003eバージョン・bit数\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edb2level\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"バックアップファイル情報確認\"\u003eバックアップファイル情報確認\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edb2ckbkp -h \u003cspan class=\"o\"\u003e[\u003c/span\u003ebackup image\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"db2のバージョン移行等での注意\"\u003eDb2のバージョン移行等での注意\u003c/h2\u003e\n\u003cp\u003eDb2バージョンが大きく異なると、別のバージョンを経由して移行（リストア）する必要がある。\u003cbr\u003e\n9系から11.5系、10系から12系等が該当する。\u003c/p\u003e\n\u003ch3 id=\"今回の事例\"\u003e今回の事例\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e移行\u003cstrong\u003e元\u003c/strong\u003e DB2: v9.7 32bit\u003c/li\u003e\n\u003cli\u003e移行\u003cstrong\u003e先\u003c/strong\u003e DB2: v11.5 64bit\u003c/li\u003e\n\u003cli\u003eバックアップファイル: オンライン、圧縮\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"問題点\"\u003e問題点\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eオンラインバックアップだとバージョン間でのリストアができない\u003c/li\u003e\n\u003cli\u003eオフラインでも v9.7 から v11.5 へ直接のリストアはできない\u003c/li\u003e\n\u003cli\u003e圧縮バックアップの場合、構成bit数が異なるDB2ではリストアできない\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"解決策\"\u003e解決策\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e一度v9.7でリストアし、オフラインバックアップを取得する\u003c/li\u003e\n\u003cli\u003ev9.7 -\u0026gt; v11.1.4(10.xでも可) -\u0026gt; 11.5 の順にリストアバックアップを行う\u003c/li\u003e\n\u003cli\u003ev9.7(32bit) -\u0026gt; v9.7(64bit)の順にリストアバックアップを行う\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"手順\"\u003e手順\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003ev9.7(32bit)\nリストア、オフラインバックアップ無圧縮を取得\u003c/li\u003e\n\u003cli\u003e-\u0026gt; v9.7(64bit)\nリストア、オフラインバックアップ圧縮を取得\u003c/li\u003e\n\u003cli\u003e-\u0026gt; v11.1.4\nリストア、オフラインバックアップ圧縮を取得\u003c/li\u003e\n\u003cli\u003e-\u0026gt; v11.5\nリストア、完了！\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"注意\"\u003e注意\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e11.5.4の場合のみ移行後runstatsで不具合がでるためdb2catを実行する必要がある\u003c/li\u003e\n\u003c/ol\u003e","title":"Db2"},{"content":"はじめに Obsidianの拡張機能とHugging Face1、Ollama2を使用してオフライン環境下での生産性の爆上げを図る。\n※自己責任で実施すること。\nflowchart LR A(Hugging FaceでLLMをフォーク) --\u0026gt; B(OllamaでLLMをpull\u0026amp;ローカル実行) B --\u0026gt; C(Obsidianの拡張機能でLLMを実行) ちなみに表題に反して、おすすめはGemini APIです。\n実装環境 M3 Macbook\nHugging FaceでLLMをフォーク 自分の使いたいLLMがいつ配信停止となっても困らないように、自分のリポジトリにフォークする。\n※ライセンスには注意し、自己責任で行うこと ※Hugging FaceにはOllamaで使えない形式のモデルも存在するため選定の際は注意すること。\n※いつ配信停止となっても別のモデルを探せるのであればOllamaでLLMをpull＆ローカル実行から実施すること。\nHugging Face アカウント の作成 Hugging Faceのアカウントはメールアドレスがあれば作れる。有料プランを使用する場合は乗っ取り防止で2FAの設定をしておいた方がいい。\nHugging Face – The AI community building the future.\nHugging Face CLI のインストール Hugging FaceのGUIだと日本語対応しておらず、UIも変更される可能性もあるため、再現性を確保するためCLIをインストールする。\n1 brew install huggingface-cli Access Tokens の作成 Settingsの[Access Tokens](Hugging Face – The AI community building the future.)から作成する。Repositories内の項目をチェックする。トークンは発行時にしか表示されないため、メモしておくこと。 Hugging Face CLI でログイン 先ほど発行したトークンでログインする。\n1 hf auth login --token \u0026lt;トークン\u0026gt; Git の大容量ファイル対応 gitが大規模言語モデル等の大容量ファイルを操作できるようにgit-lfsをインストールする。\n1 2 brew install git-lfs git lfs install LLM のフォーク フォークといってもGitHubみたいにスマートにはできないため、以下のように行う。（フォーク元のライセンスはあらかじめ確認すること。）\n1 2 3 4 5 6 # リポジトリの作成 hf repo create \u0026lt;フォーク先のリポジトリ\u0026gt; # ベースモデルのダウンロード（ダウンロード先は標準出力される） hf download \u0026lt;使いたいLLMリポジトリ\u0026gt; # ベースモデルをそのまま作成したリポジトリにアップロード hf upload \u0026lt;フォーク先のリポジトリ\u0026gt; \u0026lt;ベースモデルのダウンロード先\u0026gt; 今回は以下2つの日本語学習済みモデルをフォークする。\nモデル 用途 サイズ elyza/Llama-3-ELYZA-JP-8B-GGUF 大規模言語モデル（会話生成、質問応答など） 約4.92GB lmstudio-community/granite-embedding-278m-multilingual-GGUF 文書埋め込みモデル（類似度計算、検索など） 約972MB 1 2 3 4 5 6 7 8 9 # Llama-3-ELYZA-JP-8B-GGUFのフォーク hf repo create Llama-3-shindy-jp-8B-GGUF hf download elyza/Llama-3-ELYZA-JP-8B-GGUF hf upload shindy-dev/Llama-3-shindy-jp-8B-GGUF \u0026lt;ベースモデルのダウンロード先\u0026gt; # ruri-largeのフォーク hf repo create granite-embedding-278m-shindy-multilingual-GGUF hf download lmstudio-community/granite-embedding-278m-multilingual-GGUF hf upload shindy-dev/granite-embedding-278m-shindy-multilingual-GGUF \u0026lt;ベースモデルのダウンロード先\u0026gt; 自分の作成したリポジトリにモデルがアップロードできたところまで確認できたら、ダウンロードしたLLMは削除する。\n1 hf cache delete OllamaでLLMをpull＆ローカル実行 Ollamaのインストール 1 brew install --cask ollama Ollamaを起動 一度アイコンから起動しないとollamaコマンドが実行できなかった。\nLLMをpull 1 2 3 4 5 # チャット、ドキュメント作成支援用 ollama pull hf.co/shindy-dev/Llama-3-shindy-jp-8B-GGUF:Q4_K_M # ドキュメントの類似検索用 ollama pull hf.co/shindy-dev/granite-embedding-278m-shindy-multilingual-GGUF:Q8_0 他にpullしたいモデルがあれば以下を雛形としてpullすること。\n1 ollama pull \u0026lt;モデルのリポジトリURL\u0026gt; Obsidianの拡張機能でLLMを実行 Smart Composer ObsidianでAIとチャットできる拡張機能。チャットを通じて編集中のドキュメントについて執筆をサポートしてくれる。\n公式ドキュメント：Home · glowingjade/obsidian-smart-composer Wiki\n設定画面でollama pullしたモデルを設定する。 作成したAIモデル、データセット、アプリを管理\u0026amp;公開できるGitHubライクなプラットフォーム\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nローカルでAIモデルを動かすためのプラットフォーム\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://shindy-dev.github.io/shindys-note/posts/obsidian%E3%81%A7%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%ABlmm%E3%82%92%E4%BD%BF%E3%81%86/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003eObsidianの拡張機能と\u003ca href=\"https://huggingface.co/\"\u003eHugging Face\u003c/a\u003e\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e、\u003ca href=\"https://ollama.com/\"\u003eOllama\u003c/a\u003e\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003eを使用してオフライン環境下での生産性の爆上げを図る。\u003cbr\u003e\n※自己責任で実施すること。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-mermaid\" data-lang=\"mermaid\"\u003eflowchart LR\nA(Hugging FaceでLLMをフォーク) --\u0026gt; B(OllamaでLLMをpull\u0026amp;ローカル実行)\nB --\u0026gt; C(Obsidianの拡張機能でLLMを実行)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eちなみに表題に反して、おすすめはGemini APIです。\u003c/p\u003e\n\u003ch2 id=\"実装環境\"\u003e実装環境\u003c/h2\u003e\n\u003cp\u003eM3 Macbook\u003c/p\u003e\n\u003ch2 id=\"hugging-faceでllmをフォーク\"\u003eHugging FaceでLLMをフォーク\u003c/h2\u003e\n\u003cp\u003e自分の使いたいLLMがいつ配信停止となっても困らないように、自分のリポジトリにフォークする。\u003cbr\u003e\n※ライセンスには注意し、自己責任で行うこと\n※Hugging FaceにはOllamaで使えない形式のモデルも存在するため選定の際は注意すること。\u003cbr\u003e\n※いつ配信停止となっても別のモデルを探せるのであれば\u003ca href=\"#Ollama%E3%81%A7LLM%E3%82%92pull%EF%BC%86%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E5%AE%9F%E8%A1%8C\"\u003eOllamaでLLMをpull＆ローカル実行\u003c/a\u003eから実施すること。\u003c/p\u003e\n\u003ch3 id=\"hugging-face-アカウント-の作成\"\u003eHugging Face アカウント の作成\u003c/h3\u003e\n\u003cp\u003eHugging Faceのアカウントはメールアドレスがあれば作れる。有料プランを使用する場合は乗っ取り防止で2FAの設定をしておいた方がいい。\u003cbr\u003e\n\u003ca href=\"https://huggingface.co/\"\u003eHugging Face – The AI community building the future.\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"hugging-face-cli-のインストール\"\u003eHugging Face CLI のインストール\u003c/h3\u003e\n\u003cp\u003eHugging FaceのGUIだと日本語対応しておらず、UIも変更される可能性もあるため、再現性を確保するためCLIをインストールする。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install huggingface-cli\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"access-tokens-の作成\"\u003eAccess Tokens の作成\u003c/h3\u003e\n\u003cp\u003eSettingsの[Access Tokens](\u003ca href=\"https://huggingface.co/settings/tokens\"\u003eHugging Face – The AI community building the future.\u003c/a\u003e)から作成する。Repositories内の項目をチェックする。トークンは発行時にしか表示されないため、メモしておくこと。\n\u003cimg alt=\"600\" loading=\"lazy\" src=\"../assets/Pasted%20image%2020250816215531.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"hugging-face-cli-でログイン\"\u003eHugging Face CLI でログイン\u003c/h3\u003e\n\u003cp\u003e先ほど発行したトークンでログインする。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehf auth login --token \u0026lt;トークン\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"git-の大容量ファイル対応\"\u003eGit の大容量ファイル対応\u003c/h3\u003e\n\u003cp\u003egitが大規模言語モデル等の大容量ファイルを操作できるように\u003ccode\u003egit-lfs\u003c/code\u003eをインストールする。\u003c/p\u003e","title":"ObsidianでローカルLLMを使う"},{"content":"はじめに 以下にMarkdownの書き方について記載します。\nBlock Elements Headers 見出し 先頭に#をレベルの数だけ記述します。\n# 見出し1 ## 見出し2 ### 見出し3 #### 見出し4 ##### 見出し5 ###### 見出し6 見出し1 見出し2 見出し3 見出し4 見出し5 見出し6 Block 段落 空白行を挟むことで段落となります。\n段落1 (空行) 段落2 段落1\n段落2\nBr 改行 改行の前に半角スペース を2つ記述します。\nhoge fuga(スペース2つ) piyo hoge fuga\npiyo\nBlockquotes 引用 先頭に\u0026gt;を記述します。ネストは\u0026gt;を多重に記述します。\n\u0026gt; 引用 \u0026gt; 引用 \u0026gt;\u0026gt; 多重引用 引用\n引用\n多重引用\nCode コード `バッククオート` 3つ、あるいはダッシュ~３つで囲みます。\nprint \u0026#39;hoge\u0026#39; print \u0026#39;hoge\u0026#39; インラインコード `バッククオート` で単語を囲むとインラインコードになります。\nこれは `インラインコード`です。 これは インラインコードです。\npre 整形済みテキスト 半角スペース4個もしくはタブで、コードブロックをpre表示できます\nclass Hoge def hoge print \u0026#39;hoge\u0026#39; end end class Hoge def hoge print 'hoge' end end Hr 水平線 アンダースコア_ 、アスタリスク*、ハイフン-などを3つ以上連続して記述します。\nhoge *** hoge ___ hoge --- hoge\nhoge\nhoge Lists Ul 箇条書きリスト ハイフン-、プラス+、アスタリスク*のいずれかを先頭に記述します。\nネストはタブで表現します。\n- リスト1 - リスト1_1 - リスト1_1_1 - リスト1_1_2 - リスト1_2 - リスト2 - リスト3 リスト1 リスト1_1 リスト1_1_1 リスト1_1_2 リスト1_2 リスト2 リスト3 Ol 番号付きリスト 番号.を先頭に記述します。ネストはタブで表現します。\n番号は自動的に採番されるため、すべての行を1.と記述するのがお勧めです。\n1. 番号付きリスト1 1. 番号付きリスト1-1 1. 番号付きリスト1-2 1. 番号付きリスト2 1. 番号付きリスト3 番号付きリスト1 番号付きリスト1-1 番号付きリスト1-2 番号付きリスト2 番号付きリスト3 Span Elements Link リンク [表示文字](URL)でリンクに変換されます。\n[Google](https://www.google.co.jp/) Google\n外部参照リンク URLが長くて読みづらくなる場合や同じリンクを何度も使用する場合は、リンク先への参照を定義できます。\n[Googleを見る][Google] [Google]: http://google.com Googleを見る\n強調 em アスタリスク*もしくはアンダースコア_1個で文字列を囲みます。\nこれは *イタリック* です これは _イタリック_ です これは イタリック です これは イタリック です\nstrong アスタリスク*もしくはアンダースコア_2個で文字列を囲みます。\nこれは **ボールド** です これは __ボールド__ です これは ボールド です これは ボールド です\nem + strong アスタリスク*もしくはアンダースコア_3個で文字列を囲みます。\nこれは ***イタリック＆ボールド*** です これは ___イタリック＆ボールド___ です これは イタリック＆ボールド です これは イタリック＆ボールド です\nImages 画像 先頭の!で画像の\u0026lt;img\u0026gt;と認識されます。画像の大きさなどの指定をする場合はimgタグを使用します。\n![alt](画像URL) ![代替文字列](URL \u0026#34;タイトル\u0026#34;) \u0026lt;img src=\u0026#34;attach:cat.jpg\u0026#34; alt=\u0026#34;attach:cat\u0026#34; title=\u0026#34;attach:cat\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt; Table 表 -と|を使ってtableを作成します。\n| TH1 | TH2 | |----|----| | TD1 | TD3 | | TD2 | TD4 | TH1 TH2 TD1 TD3 TD2 TD4 | 左揃え | 中央揃え | 右揃え | |:---|:---:|---:| |1 |2 |3 | |4 |5 |6 | 左揃え 中央揃え 右揃え 1 2 3 4 5 6 ","permalink":"https://shindy-dev.github.io/shindys-note/posts/markdown%E8%A8%98%E6%B3%95/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003e以下にMarkdownの書き方について記載します。\u003c/p\u003e\n\u003ch1 id=\"block-elements\"\u003eBlock Elements\u003c/h1\u003e\n\u003ch2 id=\"headers-見出し\"\u003eHeaders 見出し\u003c/h2\u003e\n\u003cp\u003e先頭に\u003ccode\u003e#\u003c/code\u003eをレベルの数だけ記述します。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# 見出し1\n## 見出し2\n### 見出し3\n#### 見出し4\n##### 見出し5\n###### 見出し6\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"見出し1\"\u003e見出し1\u003c/h1\u003e\n\u003ch2 id=\"見出し2\"\u003e見出し2\u003c/h2\u003e\n\u003ch3 id=\"見出し3\"\u003e見出し3\u003c/h3\u003e\n\u003ch4 id=\"見出し4\"\u003e見出し4\u003c/h4\u003e\n\u003ch5 id=\"見出し5\"\u003e見出し5\u003c/h5\u003e\n\u003ch6 id=\"見出し6\"\u003e見出し6\u003c/h6\u003e\n\u003chr\u003e\n\u003ch2 id=\"block-段落\"\u003eBlock 段落\u003c/h2\u003e\n\u003cp\u003e空白行を挟むことで段落となります。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e段落1\n(空行)\n段落2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e段落1\u003c/p\u003e\n\u003cp\u003e段落2\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"br-改行\"\u003eBr 改行\u003c/h2\u003e\n\u003cp\u003e改行の前に半角スペース\u003ccode\u003e  \u003c/code\u003eを2つ記述します。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehoge\nfuga(スペース2つ)\npiyo\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ehoge\nfuga\u003cbr\u003e\npiyo\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"blockquotes-引用\"\u003eBlockquotes 引用\u003c/h2\u003e\n\u003cp\u003e先頭に\u003ccode\u003e\u0026gt;\u003c/code\u003eを記述します。ネストは\u003ccode\u003e\u0026gt;\u003c/code\u003eを多重に記述します。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026gt; 引用  \n\u0026gt; 引用\n\u0026gt;\u0026gt; 多重引用\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003e引用\u003cbr\u003e\n引用\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e多重引用\u003c/p\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"code-コード\"\u003eCode コード\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e`バッククオート`\u003c/code\u003e 3つ、あるいはダッシュ\u003ccode\u003e~\u003c/code\u003e３つで囲みます。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eprint \u0026#39;hoge\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eprint \u0026#39;hoge\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"インラインコード\"\u003eインラインコード\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e`バッククオート`\u003c/code\u003e で単語を囲むとインラインコードになります。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eこれは `インラインコード`です。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eこれは \u003ccode\u003eインラインコード\u003c/code\u003eです。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"pre-整形済みテキスト\"\u003epre 整形済みテキスト\u003c/h2\u003e\n\u003cp\u003e半角スペース4個もしくはタブで、コードブロックをpre表示できます\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    class Hoge\n        def hoge\n            print \u0026#39;hoge\u0026#39;\n        end\n    end\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003eclass Hoge\n    def hoge\n        print 'hoge'\n    end\nend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\u003ch2 id=\"hr-水平線\"\u003eHr 水平線\u003c/h2\u003e\n\u003cp\u003eアンダースコア\u003ccode\u003e_\u003c/code\u003e 、アスタリスク\u003ccode\u003e*\u003c/code\u003e、ハイフン\u003ccode\u003e-\u003c/code\u003eなどを3つ以上連続して記述します。\u003c/p\u003e","title":"Markdown記法"},{"content":"はじめに 最近Obsidianで日記だったり技術系のドキュメントを執筆していて、今後もこのツールにお世話になりそうなので構築方法をメモとして残します。以降、採用理由等の記載により前置きが長いため、具体的な手順だけ確認したい場合はこちらへお進みください。\nObsidianって何 ひとこと で言うと、「Markdownベースのノート管理ツール」。そのほかの特徴は以下のとおり。とにかく便利。\nノートは通常、ローカルに保存されるけど、ユーザの好みによってクラウドと同期したり、Git管理等のカスタマイズもできる。 クロスプラットフォームだから、OSを気にせず使える ノートを管理するフォルダのようなもの（保管庫）をVaultと読んでいる Vault内のノートの関連性を可視化（グラフビュー）できる コミュニティプラグイン（有志が作ったプラグイン）がとにかく有能で豊富 何でObsidian使ってんの 自分の好きな形式でメモが残せて、マインドマップも使えるから使ってる。具体的には\nMarkdownを書くのが楽しいから Markdownの記法についてはこちら エディタに直接画像を貼り付けられるから Canvasで自分の思考を可視化・整理できるから UIがシンプルでわかりやすいから ローカルファーストで自分のデータを自分で管理できるから（Git管理したかった） 会員登録不要で無料で使えるから ローカルLLMを動かせるから 他の競合ツールも調査しましたが、ObsidianはVS Code、OneNote、draw.ioの利点を兼ね備えており、無料で自分の求める機能が全て実現できると判断しました。\n何の媒体使ってるの M3 MacBook \u0026hellip; メイン（執筆、閲覧用途） iPad mini 6gen \u0026hellip; サブ（微修正、閲覧用途） iPhone 15 \u0026hellip; サブ（閲覧、微修正用途） 構築手順 Obsidianのインストール Obsidianの公式サイトでインストーラを入手してインストールします。\nbrewコマンドもからインストールできます。\n1 brew install --cask obsidian Vaultの作成 Obsidianを開いて「保管庫を新規作成する」の「作成」を押下します。\n「保管庫の名称」に任意のVault名（リポジトリ名なので英数字）、「ロケーション」にVaultの格納先を指定し、「作成」を押下します。\nWelcomeページが開いたらVaultの作成は完了です。\nGitのインストール 今回はGitHubでノートをバージョン管理したいので Gitの公式サイトからインストーラを入手してインストールします。\n他にもObsidian公式でクラウド保存する有料サービスや、iCloudでも保存する機能、\nDropBox等クラウドサービスと同期するプラグインもあるので、この辺は自分の用途や好みに合わせてください。\nbrewコマンドもからインストールできます。\n1 brew install git 作成したVault内のファイルをGitの追跡対象にする Gitをインストールした以下のコマンドで先ほど作成したVault内のファイルをGitの追跡対象として追加します。\n1 2 3 4 5 6 7 8 # 新規Vaultに移動 cd [Vaultのあるパス] # git初期化 git init . # GitHubユーザ名登録 git config user.name [GitHubユーザ名] # GitHubメールアドレス登録 git config user.email [GitHubメールアドレス] GitHubのユーザとメールアドレスのデフォルト値を設定する（git initの度に設定するのが面倒な）場合は\n--globalオプションを付与してください。\n1 2 git config --global user.name [GitHubユーザ名] git config --global user.email [GitHubメールアドレス] 追跡対象を追加する前に追跡対象外とするファイルやディレクトリを.gitignoreに追記します。（任意）\n# .gitignoreにはgitの追跡対象外（環境依存ファイルや機密情報が保持されたファイル等）としたい資材のパスを記載します。 # 以下はobsidianで今開いているタブ等を保持するファイルで端末依存ファイルに該当するため、除外しています。 .obsidian/workspace.json .obsidian/workspace-mobile.json 以下のコマンドで追跡対象として追加し、リポジトリに反映（コミット）しています。\n1 2 3 4 # Valut内のファイル・ディレクトリをGitの追跡対象とする（追跡対象外とするものは.gitignoreに追加してください） git add . # 初回コミット git commit -m \u0026#34;Initial Commit\u0026#34; （おまけ）Gitの改行設定 また、Obsidianをデフォルト改行コードの異なるOSを跨いで利用する場合、 gitの設定によってはファイルを開くたびに改行コードが変換されて差分検出されてしまいます。以下の対応を行ってください。\n改行コードを変更しない設定 1 2 3 4 # 自動で（カレントディレクトリのgitのみ） git config core.autocrlf false # （デフォルト設定）←こちらは任意 git config --global core.autocrlf false .gitattributesに記載 .gitattributesファイルに以下の設定を追記します。\n# コミット時に改行コードをLFに変換 * text eol=lf 設定を反映させるには、以下のコマンドを実行してGitの設定を再読み込みしてください。\n1 2 3 # カレントディレクトリのgitの設定を再読み込み git rm --cached -r . git reset GitHubのリモートリポジトリの作成 GitHubのリモートリポジトリを作成する代表的な方法は3つあります。\nGitHubからブラウザ経由で作成 GitHub Desktopから作成 GitHub Desktopのインストール方法 - GitHub Docs GitHub CLI（ghコマンド）から作成 GitHub CLI クイックスタート - GitHub Docs リポジトリの可視性（Public/Private）は任意です。公開したくない情報がある場合はPrivateにしてください。\nGitHubのリモートリポジトリとローカルリポジトリの紐付け＆push 1 2 3 4 5 # 紐付け git remote add origin git@github.com:[アカウント]/[リポジトリ名].git # 初回プッシュ（ブランチ名がmainの場合） git push -u origin main GitHub DesktopからであればUI操作で紐付け等できます。（割愛）\nここまででVaultをGitHubで管理できるようになりました。\nあとはObsidianのGitプラグインを使うことで、pull、pushの自動化ができるので、\nクラウドアプリのようにリモートリポジトリと簡単に同期できます。\nその他有用なプラグイン Smart Composer チャットbotでAIがドキュメントの執筆支援をしてくれるプラグインです。\nAPIからollamaを使用したLLMのローカル実行まで対応しています。\nObsidianでローカルLMMを使う\n","permalink":"https://shindy-dev.github.io/shindys-note/posts/obsidian%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003e最近Obsidianで日記だったり技術系のドキュメントを執筆していて、今後もこのツールにお世話になりそうなので構築方法をメモとして残します。以降、採用理由等の記載により前置きが長いため、具体的な手順だけ確認したい場合は\u003ca href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"\u003eこちら\u003c/a\u003eへお進みください。\u003c/p\u003e\n\u003ch2 id=\"obsidianって何\"\u003e\u003ca href=\"https://obsidian.md/\"\u003eObsidian\u003c/a\u003eって何\u003c/h2\u003e\n\u003cp\u003eひとこと で言うと、「Markdownベースのノート管理ツール」。そのほかの特徴は以下のとおり。とにかく便利。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eノートは通常、ローカルに保存されるけど、ユーザの好みによってクラウドと同期したり、Git管理等のカスタマイズもできる。\u003c/li\u003e\n\u003cli\u003eクロスプラットフォームだから、OSを気にせず使える\u003c/li\u003e\n\u003cli\u003eノートを管理するフォルダのようなもの（保管庫）をVaultと読んでいる\u003c/li\u003e\n\u003cli\u003eVault内のノートの関連性を可視化（グラフビュー）できる\u003c/li\u003e\n\u003cli\u003eコミュニティプラグイン（有志が作ったプラグイン）がとにかく有能で豊富\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"何でobsidian使ってんの\"\u003e何でObsidian使ってんの\u003c/h2\u003e\n\u003cp\u003e自分の好きな形式でメモが残せて、マインドマップも使えるから使ってる。具体的には\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMarkdownを書くのが楽しいから\nMarkdownの記法については\u003ca href=\"Markdown%E8%A8%98%E6%B3%95.md\"\u003eこちら\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eエディタに直接画像を貼り付けられるから\u003c/li\u003e\n\u003cli\u003eCanvasで自分の思考を可視化・整理できるから\u003c/li\u003e\n\u003cli\u003eUIがシンプルでわかりやすいから\u003c/li\u003e\n\u003cli\u003eローカルファーストで自分のデータを自分で管理できるから（Git管理したかった）\u003c/li\u003e\n\u003cli\u003e会員登録不要で無料で使えるから\u003c/li\u003e\n\u003cli\u003eローカルLLMを動かせるから\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e他の競合ツールも調査しましたが、\u003ccode\u003eObsidian\u003c/code\u003eは\u003ccode\u003eVS Code\u003c/code\u003e、\u003ccode\u003eOneNote\u003c/code\u003e、\u003ccode\u003edraw.io\u003c/code\u003eの利点を兼ね備えており、無料で自分の求める機能が全て実現できると判断しました。\u003c/p\u003e\n\u003ch2 id=\"何の媒体使ってるの\"\u003e何の媒体使ってるの\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eM3 MacBook \u0026hellip; メイン（執筆、閲覧用途）\u003c/li\u003e\n\u003cli\u003eiPad mini 6gen \u0026hellip; サブ（微修正、閲覧用途）\u003c/li\u003e\n\u003cli\u003eiPhone 15 \u0026hellip; サブ（閲覧、微修正用途）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"構築手順\"\u003e構築手順\u003c/h2\u003e\n\u003ch3 id=\"obsidianのインストール\"\u003eObsidianのインストール\u003c/h3\u003e\n\u003cp\u003eObsidianの\u003ca href=\"https://obsidian.md/\"\u003e公式サイト\u003c/a\u003eでインストーラを入手してインストールします。\u003cbr\u003e\nbrewコマンドもからインストールできます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install --cask obsidian \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"vaultの作成\"\u003eVaultの作成\u003c/h3\u003e\n\u003cp\u003eObsidianを開いて「保管庫を新規作成する」の「作成」を押下します。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"|250\" loading=\"lazy\" src=\"../assets/create_vault1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e「保管庫の名称」に任意のVault名（リポジトリ名なので英数字）、「ロケーション」にVaultの格納先を指定し、「作成」を押下します。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"|250\" loading=\"lazy\" src=\"../assets/create_vault2.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWelcomeページが開いたらVaultの作成は完了です。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"|400\" loading=\"lazy\" src=\"../assets/create_vault3.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"gitのインストール\"\u003eGitのインストール\u003c/h3\u003e\n\u003cp\u003e今回はGitHubでノートをバージョン管理したいので Gitの\u003ca href=\"https://git-scm.com/\"\u003e公式サイト\u003c/a\u003eからインストーラを入手してインストールします。\u003cbr\u003e\n他にもObsidian公式でクラウド保存する有料サービスや、iCloudでも保存する機能、\u003cbr\u003e\nDropBox等クラウドサービスと同期するプラグインもあるので、この辺は自分の用途や好みに合わせてください。\u003cbr\u003e\nbrewコマンドもからインストールできます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"作成したvault内のファイルをgitの追跡対象にする\"\u003e作成したVault内のファイルをGitの追跡対象にする\u003c/h3\u003e\n\u003cp\u003eGitをインストールした以下のコマンドで先ほど作成したVault内のファイルをGitの追跡対象として追加します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 新規Vaultに移動\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eVaultのあるパス\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# git初期化\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit init .\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# GitHubユーザ名登録\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config user.name \u003cspan class=\"o\"\u003e[\u003c/span\u003eGitHubユーザ名\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# GitHubメールアドレス登録\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config user.email \u003cspan class=\"o\"\u003e[\u003c/span\u003eGitHubメールアドレス\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eGitHubのユーザとメールアドレスのデフォルト値を設定する（git initの度に設定するのが面倒な）場合は\u003cbr\u003e\n\u003ccode\u003e--global\u003c/code\u003eオプションを付与してください。\u003c/p\u003e","title":"synotesを書いていくためのObsidian環境構築"},{"content":"1. 著作権・権利 当ブログのコンテンツについて\n文章・画像・動画など、当ブログの全てのコンテンツは基本的に著作権で保護されています。 無断転載・複製・改変は禁止です。引用する場合は出典を明記してください。 当ブログで使用している素材のうちフリー素材や第三者提供のものは、各素材のライセンスに従って使用しています。 2. プライバシー（個人情報保護） 個人情報の収集について\nコメント欄や問い合わせフォームで名前・メールアドレスを入力してもらう場合 メールマガジンやサービス登録時に情報を提供してもらう場合 個人情報の利用目的\nお問い合わせへの返信や連絡 ブログ運営上必要な通知の送信 個人情報の第三者提供\n法令に基づく場合を除き、第三者に提供することはありません。 提供が必要な場合は、事前に明示的な同意を得るようにします。 個人情報の管理\n適切な方法で安全に管理し、不正アクセス・紛失・改ざん・漏洩を防止します。 クッキー（Cookie）について\nアクセス解析や利便性向上のためにクッキーを使用する場合があります。 クッキーにより収集される情報は個人を特定するものではありません。 3. 免責事項・利用規約 免責事項\n当ブログの情報は参考目的で提供しており、内容の正確性や安全性を保証するものではありません。 本ブログの情報を利用したことによる損害について、当ブログは一切の責任を負いません。 利用規約\nコメント欄・フォームへの投稿は、他者を誹謗中傷する内容や違法行為に関する内容は禁止です。 本ブログの利用は、上記免責事項および規約に同意したものとみなします。 4. プライバシーポリシーの変更 本ポリシーは予告なく変更する場合があります。 変更後はこのページにて最新の内容を掲載します。 ","permalink":"https://shindy-dev.github.io/shindys-note/terms/","summary":"\u003ch2 id=\"1-著作権権利\"\u003e1. 著作権・権利\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e当ブログのコンテンツについて\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e文章・画像・動画など、当ブログの全てのコンテンツは基本的に著作権で保護されています。\u003c/li\u003e\n\u003cli\u003e無断転載・複製・改変は禁止です。引用する場合は出典を明記してください。\u003c/li\u003e\n\u003cli\u003e当ブログで使用している素材のうちフリー素材や第三者提供のものは、各素材のライセンスに従って使用しています。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-プライバシー個人情報保護\"\u003e2. プライバシー（個人情報保護）\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e個人情報の収集について\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eコメント欄や問い合わせフォームで名前・メールアドレスを入力してもらう場合\u003c/li\u003e\n\u003cli\u003eメールマガジンやサービス登録時に情報を提供してもらう場合\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e個人情報の利用目的\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eお問い合わせへの返信や連絡\u003c/li\u003e\n\u003cli\u003eブログ運営上必要な通知の送信\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e個人情報の第三者提供\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e法令に基づく場合を除き、第三者に提供することはありません。\u003c/li\u003e\n\u003cli\u003e提供が必要な場合は、事前に明示的な同意を得るようにします。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e個人情報の管理\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e適切な方法で安全に管理し、不正アクセス・紛失・改ざん・漏洩を防止します。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eクッキー（Cookie）について\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eアクセス解析や利便性向上のためにクッキーを使用する場合があります。\u003c/li\u003e\n\u003cli\u003eクッキーにより収集される情報は個人を特定するものではありません。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-免責事項利用規約\"\u003e3. 免責事項・利用規約\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e免責事項\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当ブログの情報は参考目的で提供しており、内容の正確性や安全性を保証するものではありません。\u003c/li\u003e\n\u003cli\u003e本ブログの情報を利用したことによる損害について、当ブログは一切の責任を負いません。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e利用規約\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eコメント欄・フォームへの投稿は、他者を誹謗中傷する内容や違法行為に関する内容は禁止です。\u003c/li\u003e\n\u003cli\u003e本ブログの利用は、上記免責事項および規約に同意したものとみなします。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-プライバシーポリシーの変更\"\u003e4. プライバシーポリシーの変更\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e本ポリシーは予告なく変更する場合があります。\u003c/li\u003e\n\u003cli\u003e変更後はこのページにて最新の内容を掲載します。\u003c/li\u003e\n\u003c/ul\u003e","title":"利用規約"}]